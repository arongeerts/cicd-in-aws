Parameters:
  VpcId:
    Type: String
    Default: vpc-2b5c7a4d
    Description: The VPC to deploy the app to
  ServicePort:
    Type: Number
    Default: 5000
  ServiceName:
    Type: String
    Default: FlaskHello
  BucketName:
    Type: String
    Default: flask-app-cicd-bucket-arongeerts

Resources:
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: flask-hello-app
      Tags:
        - Key: project
          Value: flask-hello-app

  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: An example project to use as a demo to show how CI/CD can work in the AWS stack
      RepositoryName: cicd-in-aws
      Code:
        S3:
          Bucket: !Ref BucketName
          Key: repo-contents.zip
      Tags:
        - Key: project
          Value: flask-hello-app
    DependsOn: ECRRepo

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: FlaskHelloAppBuild
      Artifacts:
        Name: flask-hello-app-build
        Type: CODEPIPELINE
      Description: Code build project that builds the docker image for flask-hello-app and pushes to ECR
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true
      ServiceRole:
        Ref: CodeBuildRole
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
      Tags:
        - Key: project
          Value: flask-hello-app

  DeploymentPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: flask-hello-deployment
      RoleArn:
        Fn::GetAtt:
          - CodePipelineRole
          - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: CheckoutSource
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: AWS
                Provider: CodeCommit
              OutputArtifacts:
                - Name: flask-hello-code-artifact
              Configuration:
                RepositoryName: cicd-in-aws
                BranchName: master
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ImageBuild
              InputArtifacts:
                - Name: flask-hello-code-artifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: flask-hello-build-artifact
              Configuration:
                ProjectName: FlaskHelloAppBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ContainerDeploy
              InputArtifacts:
                - Name: flask-hello-build-artifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: ECS
              Configuration:
                ClusterName: FargateCluster
                ServiceName: !Ref ServiceName

              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: flask-app-cicd-bucket-arongeerts

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: AccessCodeCommitFlaskCICD
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codecommit:*
                Resource:
                  Fn::GetAtt:
                    - CodeCommitRepo
                    - Arn
        - PolicyName: AccessCodeBuildFlaskCICD
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codebuild:*
                Resource:
                  Fn::GetAtt:
                    - CodeBuildProject
                    - Arn
        - PolicyName: AccessCodeDeployFlaskCICD
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codedeploy:*
                Resource: "*"
        - PolicyName: AccessS3ArtifactsBucketFlaskCICD
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: "*"
        - PolicyName: AccessECRRepoFlaskCICD
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ecr:*
                Resource:
                  Fn::GetAtt:
                    - ECRRepo
                    - Arn
        - PolicyName: AccessECS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ecs:*
                Resource: "*"
        - PolicyName: PassIAMRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: FargateCluster

  ECSFargateService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster:
        Ref: ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ServicePort
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition:
        Ref: ECSTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Ref: AppSubnet
          SecurityGroups:
            - Ref: FlaskSecurityGroup

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image:
            Ref: ECRRepo
          Essential: true
          PortMappings:
            - HostPort: !Ref ServicePort
              Protocol: TCP
              ContainerPort: !Ref ServicePort
      Cpu: 256
      ExecutionRoleArn:
        Ref: FargateRole
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
       - FARGATE
      Tags:
        - Key: project
          Value: flask-hello-app
      TaskRoleArn:
        Fn::GetAtt:
          - FargateRole
          - Arn

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Statement:
              - Action:
                - codepipeline:*
                - codedeploy:*
                - cloudwatch:*
                - logs:*
                - ecr:*
                - codecommit:*
                - s3:*
                Resource: "*"
                Effect: Allow

  FargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PullECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: ecr:*
                  Resource: "*"

  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.48.0/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: project
          Value: flask-hello-app
      VpcId:
        Ref: VpcId


  FlaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Flask app Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ServicePort
          ToPort: !Ref ServicePort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId

  ServiceNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: ServiceLB
      Scheme: internet-facing
      Subnets:
        - Ref: AppSubnet
      Type: network


  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ['', [!Ref ServiceName, TargetGroup]]
        Port: !Ref ServicePort
        Protocol: TCP
        TargetType: ip
        VpcId: !Ref VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ServiceNLB
      Port: 80
      Protocol: TCP

Outputs:
  AppDNS:
    Description: The url to reach the load balancer in front of the app
    Value:
      Fn::GetAtt:
        - ServiceNLB
        - DNSName
    Export:
      Name: dns
